/*
Тип интерфейса определяет множество методов, называющееся интерфейс.
Переменная типа интерфейса может хранить значение любого типа с набором методов,
который является любым надмножеством интерфейса.
Говорят, что такой тип реализует интерфейс.
Значение неинициализированной переменной типа интерфейса равно nil
*/

package main

import "fmt"

type actions interface {
	print()
	calc()
}

// теперь можем обращаться/вызывать методы независимо от типа переменной,
// но реализующий данный интерфейс
func run(a actions) {
	a.print()
	a.calc()
}

type col float64

func (c col) print() {
	fmt.Printf("количество = %0.2f шт\n", c)
}
func (c col) calc() {
	c *= 0.5
	fmt.Printf("вес = %0.2f кг\n", c)
}

// эта функция не входит в интерфейс, но принадлежит только данному типу
func (c col) mi() {
	fmt.Println("miiiiiii")
}

// если небыло бы интерфейса, то обращались так для каждой переменной данного типа
// func colres(c col){
// 	c.print()
// 	c.calc()
// }

type price float64

func (p price) print() {
	fmt.Printf("цена 1ед = %0.2f руб\n", p)
}
func (p price) calc() {
	p *= 100
	fmt.Printf("ИТОГО = %0.2f руб\n", p)
}

// если небыло бы интерфейса, то обращались так для каждой переменной данного типа
// func priceres(p price){
// 	p.print()
// 	p.calc()
// }

func main() {
	var maslo actions = col(55)
	run(maslo)
	//еще можно так обратиться
	maslo.calc()
	// Необходимо получить значение конкретного типа который содержит метод mi()
	// maslo.mi() - нельзя обратиться
	//После использования утверждения типа для возвращения к значению конкретного типа
	// вы сможете вызывать для него методы,
	// определенные для этого типа, но не являющиеся частью интерфейса
	//Обратное преобразование к конкретному типу с использованием утверждения типа.
	var m col = maslo.(col)
	m.mi()
	run(m)
	// далее если исходный тип не совпадает с типом в утверждении, в программе возникнет ситуация паники
	mas, ok := maslo.(price) // нужно col, а не price --> ok = false
	fmt.Println("mas =", mas, "ok =", ok)

	var baton actions = price(5)
	run(baton)

	// так приходилось бы обращаться без интерфейса
	//var maslo col = 55
	//colres(maslo)

	//var baton price = 5
	//priceres(baton)
}
