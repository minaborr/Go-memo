// Go :
// -компилируемый многопоточный яп
// -статически строго типизированный яп
// -Сборщик мусора в Go спроектирован с учётом приоритетности задержки и
//  избегания больших пауз, что особенно важно для серверов
// Go - регистрозависимый язык




/*
Комментарии создаются с помощью // или / *  * / 




Обьявдение и инициализация переменых:

	В go принят camelCase стиль

	var имя_переменной тип_данных (определение переменной)
	var имя_переменной, имя_переменной, ... , ... тип_данных

	Если значение переменной присваивается одновременно с ее объявлением,
		тип переменной в объявлении обычно не указывают.
		Тип значения, присвоенного переменной, будет считаться типом этой переменной
		var numroom = 5 (тип переменной не указан, но определяеться как int)
		numroom := 5 // короткое обьявление переменной






ТИПЫ ДАННЫХ :

(Если переменной не присвоено значение, то она имеет значение по умолчанию, которое определено для ее типа.
Для числовых типов это число 0, для логического типа - false, для строк - пустая строка(""). )


Целочисленные типы данных
	int8   от -128 до 127 и занимает в памяти 1 байт (8 бит)
	int16: от -32768 до 32767 и занимает в памяти 2 байта (16 бит)
	int32: от -2147483648 до 2147483647 и занимает 4 байта (32 бита)
	int64: от –9 223 372 036 854 775 808 до 9 223 372 036 854 775 807 и занимает 8 байт (64 бита)

	uint8:  от 0 до 255 и занимает 1 байт
	uint16: от 0 до 65535 и занимает 2 байта
	uint32: от 0 до 4294967295 и занимает 4 байта
	uint64: от 0 до 18 446 744 073 709 551 615 и занимает 8 байт

	int: представляет целое число со знаком, которое в зависимости о платформы
		может занимать либо 4 байта, либо 8 байт. То есть соответствовать либо int32, либо int64.

	uint: представляет целое беззнаковое число только без знака, которое, аналогично типу int,
		в зависимости о платформы может занимать либо 4 байта, либо 8 байт. То есть соответствовать либо uint32, либо uint64.

	byte: синоним типа uint8, представляет целое число от 0 до 255 и занимает 1 байт
	rune: синоним типа int32, представляет целое число от -2147483648 до 2147483647 и занимает 4 байта
		рунные литералы записываються в одинарные кавычки 'A' --> 65


Вещественные типы данных ( числа с плавающей точкой)
	float32: представляет число с плавающей точкой от 1.4*10-45 до 3.4*1038(для положительных). Занимает в памяти 4 байта (32 бита)
	float64: представляет число с плавающей точкой от 4.9*10-324 до 1.8*10308 (для положительных) и занимает 8 байт


Строковый тип данных
	Строка — это последовательность символов, заключенных в кавычки
		Cтроки являются неизменяемыми, то есть после создания нельзя изменять содержимое строки
		Cпециальные последовательности:
			\n — переход на новую строку,
			\t — табуляция,
			\`— одинарная кавычка,
			\« — двойная кавычка,
			\\ — обратный слеш.
		Также строка может содержать Unicode-символы. Для этого необходимо задать последовательность символов
		в формате \uXXXX, где XXXX — значение символа Unicode. Например, чтобы добавить знак ₽, нужно ввести \u20BD.


Логический тип данных 
	Логический тип или тип bool может иметь одно из двух значений: true (истина) или false (ложь).


Константы
	Константа в go определяется при помощи ключевого слова const, после которой идет имя переменной,
	имя этой константы и опционально ее тип
	const pi = 3.141


Составные типы данных

	Типы данных array и slice представляют упорядоченные коллекции элементов одного типа.
		Они отличаются в том, что массив имеет фиксированную длину, а срез (slice) - динамическую длину.

	Тип данных struct представляет составной тип, который позволяет объединять несколько значений разных типов в одну сущность

	Тип данных map представляет ассоциативный массив (отображение), который хранит пары ключ-значение.

	Тип данных interface определяет набор методов, которые должны быть реализованы другими типами. Он позволяет создавать полиморфные объекты.


*/



package main

import (
	"fmt"
	//"string"
	//"math"
	//"reflect"
)

func main() {
	fmt.Println("this is a memo =)")
}

